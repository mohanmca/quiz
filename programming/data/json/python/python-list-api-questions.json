[
  {"type":"radiogroup","name":"q1","title":"What does list.append(x) return?","choices":["None","The appended element","The new list","The new length"],"correctAnswer":"None"},
  {"type":"radiogroup","name":"q2","title":"Which statement is true about list.sort()?","choices":["Sorts in place and returns None","Returns a new sorted list","Is stable but returns a copy","Always sorts descending"],"correctAnswer":"Sorts in place and returns None"},
  {"type":"radiogroup","name":"q3","title":"Which creates a shallow copy?","choices":["a[:]","a.copy()","list(a)","All of the above"],"correctAnswer":"All of the above"},
  {"type":"radiogroup","name":"q4","title":"What does list.extend(iterable) do?","choices":["Appends each element of iterable","Appends iterable as one element","Clears the list","Inserts at the beginning"],"correctAnswer":"Appends each element of iterable"},
  {"type":"radiogroup","name":"q5","title":"What is the result of list.reverse()?","choices":["Reverses in place and returns None","Returns a reversed copy","Raises TypeError","Returns an iterator"],"correctAnswer":"Reverses in place and returns None"},
  {"type":"radiogroup","name":"q6","title":"Which returns an iterator over the list in reverse order?","choices":["reversed(a)","a[::-1]","a.reverse()","sorted(a, reverse=True)"],"correctAnswer":"reversed(a)"},
  {"type":"radiogroup","name":"q7","title":"Which removes and returns the last element by default?","choices":["a.pop()","a.remove()","del a[-1]","a.clear()"],"correctAnswer":"a.pop()"},
  {"type":"radiogroup","name":"q8","title":"What does list.remove(x) do?","choices":["Removes first occurrence of x","Removes all occurrences of x","Pops by index x","Clears the list"],"correctAnswer":"Removes first occurrence of x"},
  {"type":"radiogroup","name":"q9","title":"What is the time complexity of x in a for lists?","choices":["O(n)","O(1)","O(log n)","Amortized O(1)"],"correctAnswer":"O(n)"},
  {"type":"radiogroup","name":"q10","title":"Which sorts with a custom key using absolute value?","choices":["a.sort(key=abs)","a.sort(cmp=abs)","sorted(a, cmp=abs)","a.sort(key=lambda:abs)"],"correctAnswer":"a.sort(key=abs)"},
  {"type":"radiogroup","name":"q11","title":"sorted(a) vs a.sort()?","choices":["sorted returns a new list; sort mutates in place","Both return new lists","Both mutate in place","sorted mutates, sort returns new"],"correctAnswer":"sorted returns a new list; sort mutates in place"},
  {"type":"radiogroup","name":"q12","title":"How to delete a slice in place?","choices":["del a[2:7]","a.remove(a[2:7])","a.pop(2,7)","a.delete(2:7)"],"correctAnswer":"del a[2:7]"},
  {"type":"radiogroup","name":"q13","title":"Slice assignment a[2:5] = [9,9,9] does what?","choices":["Mutates a and can change its length","Always keeps same length","Creates a copy","Raises TypeError"],"correctAnswer":"Mutates a and can change its length"},
  {"type":"radiogroup","name":"q14","title":"What happens with a *= 3 for a list?","choices":["Repeats elements in place","Creates a new list and rebinds","Clears then appends","No effect for empty list"],"correctAnswer":"Repeats elements in place"},
  {"type":"radiogroup","name":"q15","title":"Which builds a list of squares from 0..n-1?","choices":["[i*i for i in range(n)]","(i*i for i in range(n))","map(lambda i:i*i, range(n))","{i*i for i in range(n)}"],"correctAnswer":"[i*i for i in range(n)]"},
  {"type":"radiogroup","name":"q16","title":"What is the pitfall of [[0]*3]*3?","choices":["Rows share the same inner list","It is slower than loops","It creates a generator","No pitfall"],"correctAnswer":"Rows share the same inner list"},
  {"type":"radiogroup","name":"q17","title":"How to correctly create a 3x3 zero matrix?","choices":["[[0 for _ in range(3)] for _ in range(3)]","[[0]*3]*3","list(0 for _ in range(3,3))","[0]*9"],"correctAnswer":"[[0 for _ in range(3)] for _ in range(3)]"},
  {"type":"radiogroup","name":"q18","title":"What does a[:] = [] do?","choices":["Clears the list in place","Creates a new empty list","Raises ValueError","Copies the list"],"correctAnswer":"Clears the list in place"},
  {"type":"radiogroup","name":"q19","title":"a += b on lists behaves like","choices":["a.extend(b)","a = a + b","a.append(b)","a = b + a"],"correctAnswer":"a.extend(b)"},
  {"type":"radiogroup","name":"q20","title":"a + b on lists","choices":["Creates a new list","Mutates a","Mutates b","Raises TypeError"],"correctAnswer":"Creates a new list"},
  {"type":"radiogroup","name":"q21","title":"Which is True about list.index(x, start, stop)?","choices":["Search can be bounded by start/stop","Ignores start/stop","Returns -1 if not found","Returns last index by default"],"correctAnswer":"Search can be bounded by start/stop"},
  {"type":"radiogroup","name":"q22","title":"list.count(x) returns","choices":["Number of occurrences of x","Index of x","0 or 1 only","Iterator of matches"],"correctAnswer":"Number of occurrences of x"},
  {"type":"radiogroup","name":"q23","title":"Which reverses a copy without mutating a?","choices":["a[::-1]","a.reverse()","reversed(a); list(reversed(a))","Both a[::-1] and list(reversed(a))"],"correctAnswer":"Both a[::-1] and list(reversed(a))"},
  {"type":"radiogroup","name":"q24","title":"Which method inserts before index i?","choices":["a.insert(i, x)","a.append(x)","a.extend([i,x])","a.add(i, x)"],"correctAnswer":"a.insert(i, x)"},
  {"type":"radiogroup","name":"q25","title":"What happens if insert index < 0?","choices":["Insertion occurs at the start","Raises IndexError","Appends at end","No-op"],"correctAnswer":"Insertion occurs at the start"},
  {"type":"radiogroup","name":"q26","title":"What happens if insert index > len(a)?","choices":["Appends at the end","Raises IndexError","Inserts in the middle","Replaces last"],"correctAnswer":"Appends at the end"},
  {"type":"radiogroup","name":"q27","title":"sorted is","choices":["Stable","Unstable","Quicksort","Heapsort"],"correctAnswer":"Stable"},
  {"type":"radiogroup","name":"q28","title":"How to sort by two keys: primary len, then lexicographic?","choices":["a.sort(key=lambda s:(len(s), s))","a.sort(key=len, then=s)","sorted(a, cmp=..) ","a.sort(key=len).sort()"],"correctAnswer":"a.sort(key=lambda s:(len(s), s))"},
  {"type":"radiogroup","name":"q29","title":"Which is True about mutating methods (append/extend/insert/remove/clear/sort/reverse)?","choices":["They return None","They return self for chaining","They return the changed value","They sometimes return new length"],"correctAnswer":"They return None"},
  {"type":"radiogroup","name":"q30","title":"Which builds a flattened list from a list of lists?","choices":["[x for row in A for x in row]","sum(A)","A.flatten()","list(flatten(A)) by default"],"correctAnswer":"[x for row in A for x in row]"},
  {"type":"radiogroup","name":"q31","title":"What does list(a) do when a is a generator?","choices":["Consumes the generator into a list","Creates lazy list","Copies by reference","Raises TypeError"],"correctAnswer":"Consumes the generator into a list"},
  {"type":"radiogroup","name":"q32","title":"Which creates a copy that preserves identity of nested lists?","choices":["copy.deepcopy(a)","a.copy()","a[:]","list(a)"],"correctAnswer":"copy.deepcopy(a)"},
  {"type":"radiogroup","name":"q33","title":"Which statement is True about slicing bounds?","choices":["Out-of-range bounds are clamped","Out-of-range raises IndexError","Negative indices forbidden","Stop is inclusive"],"correctAnswer":"Out-of-range bounds are clamped"},
  {"type":"radiogroup","name":"q34","title":"What happens with a[::0]?","choices":["ValueError","Empty list","Same list","TypeError"],"correctAnswer":"ValueError"},
  {"type":"radiogroup","name":"q35","title":"Which creates a list of N zeros?","choices":["[0]*N","[0 for _ in range(N)]","list(repeat(0, N))","All of the above (with itertools.repeat for 3)"],"correctAnswer":"All of the above (with itertools.repeat for 3)"},
  {"type":"radiogroup","name":"q36","title":"' '.join(a) expects a to be","choices":["Iterable of str","Iterable of any","Iterable of numbers","A list of lists"],"correctAnswer":"Iterable of str"},
  {"type":"radiogroup","name":"q37","title":"How to join numbers with spaces?","choices":["' '.join(map(str, a))","' '.join(a)","' '.join(str(a))","' '.join(list(a))"],"correctAnswer":"' '.join(map(str, a))"},
  {"type":"radiogroup","name":"q38","title":"Which removes duplicates while preserving order?","choices":["list(dict.fromkeys(a))","list(set(a))","sorted(set(a))","a.unique()"],"correctAnswer":"list(dict.fromkeys(a))"},
  {"type":"radiogroup","name":"q39","title":"enumerate(a, start=1) yields","choices":["(1, a[0]), (2, a[1]), ...","(0, a[0]), (1, a[1]), ...","Indices then values as separate lists","Only indices"],"correctAnswer":"(1, a[0]), (2, a[1]), ..."},
  {"type":"radiogroup","name":"q40","title":"Star-unpacking: x, *mid, y = [1,2,3,4,5] gives mid =","choices":["[2,3,4]","[1,2,3,4]","[2,3]","(2,3,4)"],"correctAnswer":"[2,3,4]"},
  {"type":"radiogroup","name":"q41","title":"a.extend('abc') results in","choices":["Appending 'a','b','c' separately","Appending one string element","Error invalid iterable","No change"],"correctAnswer":"Appending 'a','b','c' separately"},
  {"type":"radiogroup","name":"q42","title":"Which is True about reversed(a)?","choices":["Returns an iterator","Returns a new list","Mutates in place","Is the same as a[::-1]"],"correctAnswer":"Returns an iterator"},
  {"type":"radiogroup","name":"q43","title":"When is list multiplication safe: [sublist[:] for _ in range(n)] vs [[sub]*n]?","choices":["Use comprehension with copy to avoid aliasing","Both are always safe","Use [[sub]*n] for deep copy","Never multiply lists"],"correctAnswer":"Use comprehension with copy to avoid aliasing"},
  {"type":"radiogroup","name":"q44","title":"What does a.clear() do?","choices":["Remove all elements in place","Rebind a to []","Raises AttributeError on empty","Removes only duplicates"],"correctAnswer":"Remove all elements in place"},
  {"type":"radiogroup","name":"q45","title":"Which turns an iterator into a list efficiently once?","choices":["list(it)","[*it]","collections.deque(it, maxlen=0)","All of the above"],"correctAnswer":"All of the above"}
]
