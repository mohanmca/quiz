[
  {"type":"radiogroup","name":"pg_q1","title":"What is the primary goal of a relational data model from first principles?","choices":["Store JSON for maximum flexibility","Minimize redundancy while preserving semantic integrity","Maximize denormalization for write speed","Avoid foreign keys entirely"],"correctAnswer":"Minimize redundancy while preserving semantic integrity"},
  {"type":"radiogroup","name":"pg_q2","title":"Which normal form primarily removes partial dependency on a composite key?","choices":["1NF","2NF","3NF","BCNF"],"correctAnswer":"2NF"},
  {"type":"radiogroup","name":"pg_q3","title":"In PostgreSQL, which index type is the default and best for equality and range on sortable types?","choices":["B-Tree","GIN","GiST","BRIN"],"correctAnswer":"B-Tree"},
  {"type":"radiogroup","name":"pg_q4","title":"Which index type is typically used for full-text search (tsvector)?","choices":["B-Tree","GIN","HASH","BRIN"],"correctAnswer":"GIN"},
  {"type":"radiogroup","name":"pg_q5","title":"Which index is efficient for large, naturally ordered data (e.g., timestamps) with very large tables?","choices":["BRIN","B-Tree","GiST","SP-GiST"],"correctAnswer":"BRIN"},
  {"type":"radiogroup","name":"pg_q6","title":"What is the first step when investigating a slow query?","choices":["Create random indexes","Run EXPLAIN (ANALYZE, BUFFERS)","Increase work_mem","Vacuum full database"],"correctAnswer":"Run EXPLAIN (ANALYZE, BUFFERS)"},
  {"type":"radiogroup","name":"pg_q7","title":"Which view helps identify high-cost statements over time?","choices":["pg_stat_activity","pg_stat_statements","pg_locks","pg_indexes"],"correctAnswer":"pg_stat_statements"},
  {"type":"radiogroup","name":"pg_q8","title":"What does a sequential scan (Seq Scan) often indicate on a large table?","choices":["Index is used correctly","No suitable index or poor selectivity","Too many partitions","Corrupted visibility map"],"correctAnswer":"No suitable index or poor selectivity"},
  {"type":"radiogroup","name":"pg_q9","title":"Given a highly selective predicate on column user_id, which is most appropriate?","choices":["CREATE INDEX ON t(user_id);","CREATE BRIN INDEX ON t(user_id);","CREATE INDEX ON t USING GIN(user_id);","No index: rely on seq scan"],"correctAnswer":"CREATE INDEX ON t(user_id);"},
  {"type":"radiogroup","name":"pg_q10","title":"How can you index a function call efficiently?","choices":["Create an expression index","Use a composite key","Use BRIN only","Not possible"],"correctAnswer":"Create an expression index"},
  {"type":"radiogroup","name":"pg_q11","title":"Example: create an index on lower(email). Which is correct?\n```sql\nCREATE INDEX idx_users_email_lower ON users ((lower(email)));\n```","choices":["Correct","Wrong syntax","Must use btree explicitly","Not supported"],"correctAnswer":"Correct"},
  {"type":"radiogroup","name":"pg_q12","title":"What is a partial index useful for?","choices":["Indexing entire table","Indexing a subset of rows to improve selectivity and size","Only for text search","Only for jsonb"],"correctAnswer":"Indexing a subset of rows to improve selectivity and size"},
  {"type":"radiogroup","name":"pg_q13","title":"Which operator class should be used to index jsonb containment queries (\u003e=\u003e)?","choices":["btree_ops","gin__ops","gin_jsonb_ops","gist_trgm_ops"],"correctAnswer":"gin_jsonb_ops"},
  {"type":"radiogroup","name":"pg_q14","title":"Which index type is appropriate for geometric ranges and KNN?","choices":["GiST","GIN","BRIN","HASH"],"correctAnswer":"GiST"},
  {"type":"radiogroup","name":"pg_q15","title":"What does ANALYZE do in PostgreSQL?","choices":["Rebuild indexes","Update table statistics for the planner","Vacuum dead tuples","Run VACUUM FULL"],"correctAnswer":"Update table statistics for the planner"},
  {"type":"radiogroup","name":"pg_q16","title":"Out-of-date statistics typically cause which issue?","choices":["Lock timeouts","Planner misestimates and wrong plan choice","WAL corruption","Index corruption"],"correctAnswer":"Planner misestimates and wrong plan choice"},
  {"type":"radiogroup","name":"pg_q17","title":"Which setting controls automatic stats collection for a table?","choices":["autovacuum_vacuum_scale_factor","autovacuum_analyze_scale_factor","checkpoint_completion_target","shared_buffers"],"correctAnswer":"autovacuum_analyze_scale_factor"},
  {"type":"radiogroup","name":"pg_q18","title":"How to see if a query is hitting disk heavily?","choices":["EXPLAIN only","EXPLAIN (ANALYZE, BUFFERS) to inspect shared/local read blocks","VACUUM VERBOSE","SHOW work_mem"],"correctAnswer":"EXPLAIN (ANALYZE, BUFFERS) to inspect shared/local read blocks"},
  {"type":"radiogroup","name":"pg_q19","title":"What is HOT update (Heap Only Tuple)?","choices":["Update that avoids index tuple creation when indexed columns are unchanged","Update that updates indexes only","Fast insert path","Hash-only tuple"],"correctAnswer":"Update that avoids index tuple creation when indexed columns are unchanged"},
  {"type":"radiogroup","name":"pg_q20","title":"Which fillfactor effect is correct?","choices":["Higher fillfactor leaves more free space per page","Lower fillfactor leaves free space per page for HOT updates","Fillfactor affects WAL size only","Fillfactor unrelated to updates"],"correctAnswer":"Lower fillfactor leaves free space per page for HOT updates"},
  {"type":"radiogroup","name":"pg_q21","title":"What is index bloat?","choices":["Logical corruption","Excess dead/unused index pages increasing size and hurting cache","Lack of autovacuum","Too many partitions"],"correctAnswer":"Excess dead/unused index pages increasing size and hurting cache"},
  {"type":"radiogroup","name":"pg_q22","title":"Which action helps mitigate index bloat without table rewrite?","choices":["REINDEX CONCURRENTLY","VACUUM FULL","DROP DATABASE","Disable autovacuum"],"correctAnswer":"REINDEX CONCURRENTLY"},
  {"type":"radiogroup","name":"pg_q23","title":"For time-series large tables, which approach is often best?","choices":["Random UUID clustering","Range partitioning by time, BRIN indexes, and retention","Single table with many btree indexes","Hash partitioning"],"correctAnswer":"Range partitioning by time, BRIN indexes, and retention"},
  {"type":"radiogroup","name":"pg_q24","title":"Which partitioning benefit is key for performance?","choices":["Unique indexes across partitions are faster","Pruning reduces scanned data to relevant partitions","Always fewer locks","Automatic replication"],"correctAnswer":"Pruning reduces scanned data to relevant partitions"},
  {"type":"radiogroup","name":"pg_q25","title":"Which helps diagnose missing indexes quickly?","choices":["pg_stat_user_indexes hit ratio","EXPLAIN plan showing Seq Scan and filter selectivity","pg_replication_slots","pg_statio_all_tables"],"correctAnswer":"EXPLAIN plan showing Seq Scan and filter selectivity"},
  {"type":"radiogroup","name":"pg_q26","title":"How to force planner to consider using an index when correlation is high (e.g., timestamp monotonic)?","choices":["Enable enable_seqscan=off always","Use BRIN or CLUSTER to align order and reduce random I/O","Increase random_page_cost dramatically","Disable autovacuum"],"correctAnswer":"Use BRIN or CLUSTER to align order and reduce random I/O"},
  {"type":"radiogroup","name":"pg_q27","title":"What does VACUUM do?","choices":["Rewrites table entirely","Removes dead tuples and updates visibility map","Rebuilds all indexes","Runs ANALYZE"],"correctAnswer":"Removes dead tuples and updates visibility map"},
  {"type":"radiogroup","name":"pg_q28","title":"What is the visibility map used for?","choices":["Track which pages are all-visible/all-frozen to skip during vacuum and index-only scans","Track lock owners","Track WAL segments","Track autovacuum workers"],"correctAnswer":"Track which pages are all-visible/all-frozen to skip during vacuum and index-only scans"},
  {"type":"radiogroup","name":"pg_q29","title":"Which condition enables an index-only scan?","choices":["Index exists","All-visible pages and covering index for needed columns","Partition table","Foreign key present"],"correctAnswer":"All-visible pages and covering index for needed columns"},
  {"type":"radiogroup","name":"pg_q30","title":"Which GIN feature helps with containment queries on jsonb?","choices":["Pending list","Partial index","Operator class gist_jsonb_ops","Hash buckets"],"correctAnswer":"Pending list"},
  {"type":"radiogroup","name":"pg_q31","title":"What is a risk of creating many overlapping multicolumn indexes?","choices":["Better cache locality always","Write amplification on inserts/updates and slower planner","Less WAL usage","Guaranteed faster queries"],"correctAnswer":"Write amplification on inserts/updates and slower planner"},
  {"type":"radiogroup","name":"pg_q32","title":"For a query filtering on (a,b) and sorting by (a,b), which index is best?","choices":["INDEX ON t(b,a)","INDEX ON t(a,b)","Separate indexes on a and b","BRIN on a"],"correctAnswer":"INDEX ON t(a,b)"},
  {"type":"radiogroup","name":"pg_q33","title":"Which SQL shows actual execution with timing and buffer usage?\n```sql\nEXPLAIN (ANALYZE, BUFFERS) SELECT ...;\n```","choices":["Correct","Needs VERBOSE","Use EXPLAIN only","Use EXPLAIN (COSTS OFF)"],"correctAnswer":"Correct"},
  {"type":"radiogroup","name":"pg_q34","title":"What does work_mem control?","choices":["Memory for maintenance operations","Memory per node for sorts/hash-joins before spilling","Shared buffer pool size","WAL segment size"],"correctAnswer":"Memory per node for sorts/hash-joins before spilling"},
  {"type":"radiogroup","name":"pg_q35","title":"A lot of temporary file usage in logs indicates what?","choices":["Autovacuum bug","Sort/hash operations spilling due to low work_mem","Too many connections","JIT disabled"],"correctAnswer":"Sort/hash operations spilling due to low work_mem"},
  {"type":"radiogroup","name":"pg_q36","title":"Which extension captures normalized query stats for tuning?","choices":["pg_stat_statements","pg_freespacemap","pg_trgm","pg_walinspect"],"correctAnswer":"pg_stat_statements"},
  {"type":"radiogroup","name":"pg_q37","title":"Which index helps LIKE '%term%' queries?","choices":["B-Tree","pg_trgm GIN or GiST indexes","BRIN","HASH"],"correctAnswer":"pg_trgm GIN or GiST indexes"},
  {"type":"radiogroup","name":"pg_q38","title":"To reduce write amplification on hot tables, which is sound?","choices":["Remove all indexes","Keep only necessary covering indexes; consider lower fillfactor","Increase max_connections","Disable checkpoints"],"correctAnswer":"Keep only necessary covering indexes; consider lower fillfactor"},
  {"type":"radiogroup","name":"pg_q39","title":"Which parameter most influences planner's choice between index vs seq scan?","choices":["random_page_cost and cpu_tuple_cost","checkpoint_timeout","wal_level","max_wal_senders"],"correctAnswer":"random_page_cost and cpu_tuple_cost"},
  {"type":"radiogroup","name":"pg_q40","title":"What does CLUSTER ON an index do?","choices":["Rebuild index only","Physically reorder table by index to improve locality","Change index type","Vacuum table"],"correctAnswer":"Physically reorder table by index to improve locality"},
  {"type":"radiogroup","name":"pg_q41","title":"Which command rebuilds an index without blocking reads/writes much?","choices":["REINDEX","REINDEX CONCURRENTLY","VACUUM FULL","CREATE INDEX"],"correctAnswer":"REINDEX CONCURRENTLY"},
  {"type":"radiogroup","name":"pg_q42","title":"Which tells if an index is actually used by queries?","choices":["pg_stat_user_indexes.idx_scan","pg_stat_io","pg_locks","pg_class.relpersistence"],"correctAnswer":"pg_stat_user_indexes.idx_scan"},
  {"type":"radiogroup","name":"pg_q43","title":"When designing composite indexes, which order is generally recommended?","choices":["Random order","Most selective/equality columns first, then range/sort columns","Descending order always","Alphabetical by name"],"correctAnswer":"Most selective/equality columns first, then range/sort columns"},
  {"type":"radiogroup","name":"pg_q44","title":"Given a table with a heavy filter on status='active' and frequent queries, which is best?","choices":["Partial index WHERE status='active'","Full-table index on status","BRIN on status","No index"],"correctAnswer":"Partial index WHERE status='active'"},
  {"type":"radiogroup","name":"pg_q45","title":"What does autovacuum_vacuum_scale_factor control?","choices":["Threshold of dead tuples relative to table size to trigger vacuum","Background writer speed","JIT threshold","Replication lag"],"correctAnswer":"Threshold of dead tuples relative to table size to trigger vacuum"},
  {"type":"radiogroup","name":"pg_q46","title":"Which statement about foreign keys and performance is true?","choices":["They always slow queries dramatically","They enforce integrity; proper indexing on FK columns avoids extra seq scans","They disable HOT updates","They force seq scans"],"correctAnswer":"They enforce integrity; proper indexing on FK columns avoids extra seq scans"},
  {"type":"radiogroup","name":"pg_q47","title":"What's the effect of too many indexes on a write-heavy table?","choices":["Faster inserts","More WAL and slower writes due to index maintenance","No effect","Less bloat"],"correctAnswer":"More WAL and slower writes due to index maintenance"},
  {"type":"radiogroup","name":"pg_q48","title":"How do you confirm a specific index is used in a query?","choices":["Look at pg_class","Use EXPLAIN plan and check Index Scan on that index","Assume by name","Check pg_hba.conf"],"correctAnswer":"Use EXPLAIN plan and check Index Scan on that index"},
  {"type":"radiogroup","name":"pg_q49","title":"Which SQL creates a partial index on recent data only?\n```sql\nCREATE INDEX idx_orders_recent\nON orders(created_at)\nWHERE created_at \u003e now() - interval '30 days';\n```","choices":["Correct","Wrong syntax","Not supported","Needs USING btree"],"correctAnswer":"Correct"},
  {"type":"radiogroup","name":"pg_q50","title":"Which is a signal to increase default_statistics_target on a column?","choices":["Uniform distribution","Highly skewed data leading to misestimates","Small table","No joins"],"correctAnswer":"Highly skewed data leading to misestimates"},
  {"type":"radiogroup","name":"pg_q51","title":"What does correlation in pg_stats describe?","choices":["Relationship between two tables","How physically ordered a column is w.r.t. table","Foreign key strength","Index scan count"],"correctAnswer":"How physically ordered a column is w.r.t. table"},
  {"type":"radiogroup","name":"pg_q52","title":"Which helps LIKE 'term%' the most?","choices":["btree index on column with text_pattern_ops","BRIN","GIN jsonb","No index"],"correctAnswer":"btree index on column with text_pattern_ops"},
  {"type":"radiogroup","name":"pg_q53","title":"What is the difference between GIN and GiST for trigram?","choices":["GIN supports KNN; GiST does not","GiST supports KNN-like similarity; GIN supports fast containment","Identical behavior","Only BRIN supports trigram"],"correctAnswer":"GiST supports KNN-like similarity; GIN supports fast containment"},
  {"type":"radiogroup","name":"pg_q54","title":"Which query helps inspect table/index sizes?","choices":["SELECT * FROM pg_class;","\n```sql\nSELECT relname, pg_size_pretty(pg_total_relation_size(oid))\nFROM pg_class WHERE relkind IN ('r','i')\nORDER BY pg_total_relation_size(oid) DESC;\n```","SHOW data_directory;","VACUUM VERBOSE;"],"correctAnswer":"\n```sql\nSELECT relname, pg_size_pretty(pg_total_relation_size(oid))\nFROM pg_class WHERE relkind IN ('r','i')\nORDER BY pg_total_relation_size(oid) DESC;\n```"},
  {"type":"radiogroup","name":"pg_q55","title":"What is a covering index?","choices":["Index that covers all columns of a table","Index that includes all columns needed by a query to avoid heap fetch","Index on all FKs","Composite of all columns"],"correctAnswer":"Index that includes all columns needed by a query to avoid heap fetch"},
  {"type":"radiogroup","name":"pg_q56","title":"Which clause lets you include non-key columns in a covering index (v14+)?","choices":["INCLUDE","USING","WITH","STORAGE"],"correctAnswer":"INCLUDE"},
  {"type":"radiogroup","name":"pg_q57","title":"How to detect bloated indexes programmatically?","choices":["pg_stat_statements","Extensions or queries using pg_stat_all_indexes and page inspection","pg_hba.conf","pg_roles"],"correctAnswer":"Extensions or queries using pg_stat_all_indexes and page inspection"},
  {"type":"radiogroup","name":"pg_q58","title":"Which is a sane process to tune a slow workload?","choices":["Add random indexes first","Measure (pg_stat_statements), EXPLAIN (ANALYZE, BUFFERS), adjust schema/indexes/queries, re-measure","Increase shared_buffers to max","Disable autovacuum"],"correctAnswer":"Measure (pg_stat_statements), EXPLAIN (ANALYZE, BUFFERS), adjust schema/indexes/queries, re-measure"},
  {"type":"radiogroup","name":"pg_q59","title":"Which is a safe index drop strategy?","choices":["DROP all indexes","Drop unused indexes observed over a long period (idx_scan≈0) with verification","Drop primary keys first","Drop indexes during peak hours"],"correctAnswer":"Drop unused indexes observed over a long period (idx_scan≈0) with verification"},
  {"type":"radiogroup","name":"pg_q60","title":"Given a table with predicate on date range and equality on user_id, which composite index is better?","choices":["(date, user_id)","(user_id, date)","(date) INCLUDE(user_id)","BRIN(date) and btree(user_id) separately"],"correctAnswer":"(user_id, date)"},
  {"type":"radiogroup","name":"pg_q61","title":"What is a common anti-pattern for indexing?","choices":["Cover common predicates","Create many overlapping indexes with same leading column","Use partial indexes for hot subsets","Use expression indexes where applicable"],"correctAnswer":"Create many overlapping indexes with same leading column"},
  {"type":"radiogroup","name":"pg_q62","title":"Which query shows per-table vacuum/analyze stats?","choices":["SELECT * FROM pg_stat_all_tables;","SELECT * FROM pg_stat_database;","SELECT * FROM pg_settings;","SELECT * FROM pg_constraints;"],"correctAnswer":"SELECT * FROM pg_stat_all_tables;"},
  {"type":"radiogroup","name":"pg_q63","title":"Which setting helps with bulk load performance?","choices":["synchronous_commit = off (with care)","max_wal_senders","hot_standby_feedback","archive_timeout"],"correctAnswer":"synchronous_commit = off (with care)"},
  {"type":"radiogroup","name":"pg_q64","title":"Which plan node indicates an index-only scan?","choices":["Index Scan","Bitmap Heap Scan","Index Only Scan","Seq Scan"],"correctAnswer":"Index Only Scan"},
  {"type":"radiogroup","name":"pg_q65","title":"What is a bitmap scan good for?","choices":["Very selective single-row lookup","Combining multiple conditions into a bitmap before heap fetch","Avoiding heap entirely","Joins only"],"correctAnswer":"Combining multiple conditions into a bitmap before heap fetch"},
  {"type":"radiogroup","name":"pg_q66","title":"Which function reports query execution statistics if enabled?","choices":["pg_stat_statements_reset","pg_backend_pid","pg_total_relation_size","pg_stat_statements"],"correctAnswer":"pg_stat_statements"},
  {"type":"radiogroup","name":"pg_q67","title":"A table has frequent updates on a non-indexed column and occasional range queries on created_at. Which compromise is reasonable?","choices":["No index at all","BRIN on created_at to keep writes light and queries acceptable","GIN on created_at","B-Tree on created_at only"],"correctAnswer":"BRIN on created_at to keep writes light and queries acceptable"},
  {"type":"radiogroup","name":"pg_q68","title":"Which is a recommended habit when adding indexes?","choices":["Always add multi-column indexes of all columns used anywhere","Use EXPLAIN to target real predicates and ordering requirements","Add both GIN and GiST for every text column","Always add HASH indexes"],"correctAnswer":"Use EXPLAIN to target real predicates and ordering requirements"},
  {"type":"radiogroup","name":"pg_q69","title":"Which EXPLAIN evidence suggests misestimation?","choices":["Actual rows >> Planned rows repeatedly","Actual rows close to Planned rows","Buffers: shared hit high","Low planning time"],"correctAnswer":"Actual rows >> Planned rows repeatedly"},
  {"type":"radiogroup","name":"pg_q70","title":"Which queue to analyze before changing cost settings globally?","choices":["None","Representative slow queries and their plans","All queries","DDL statements only"],"correctAnswer":"Representative slow queries and their plans"},
  {"type":"radiogroup","name":"pg_q71","title":"How do you index for case-insensitive search on username?","choices":["CREATE INDEX ON users(username)","CREATE INDEX ON users((lower(username)))","CREATE INDEX ON users USING GIN(username)","Use BRIN"],"correctAnswer":"CREATE INDEX ON users((lower(username)))"},
  {"type":"radiogroup","name":"pg_q72","title":"Which is a good approach for JSONB key existence queries?","choices":["B-Tree on jsonb","GIN on jsonb with appropriate opclass","BRIN on jsonb","Hash index"],"correctAnswer":"GIN on jsonb with appropriate opclass"},
  {"type":"radiogroup","name":"pg_q73","title":"What does pg_stat_user_indexes.idx_tup_read >> idx_tup_fetch suggest?","choices":["Index-only scans are common","Index is unused","Seq scans are common","I/O issues"],"correctAnswer":"Index-only scans are common"},n+  {"type":"radiogroup","name":"pg_q74","title":"Which SQL creates a covering index for a common query filtering on (account_id) and selecting (created_at, amount)?\n```sql\nCREATE INDEX idx_txn_cover\nON transactions(account_id) INCLUDE(created_at, amount);\n```","choices":["Correct","Wrong syntax","Needs USING btree","Not supported"],"correctAnswer":"Correct"},
  {"type":"radiogroup","name":"pg_q75","title":"Which monitoring helps detect I/O pressure from queries?","choices":["pg_stat_statements mean time only","pg_stat_io / BUFFERS in EXPLAIN ANALYZE / system I/O metrics","pg_authid","pg_conversion"],"correctAnswer":"pg_stat_io / BUFFERS in EXPLAIN ANALYZE / system I/O metrics"},
  {"type":"radiogroup","name":"pg_q76","title":"How to make LIKE queries fast for arbitrary substrings?","choices":["Lower shared_buffers","Use pg_trgm with GIN/GiST index and proper operator","Use BRIN","Use HASH index"],"correctAnswer":"Use pg_trgm with GIN/GiST index and proper operator"},
  {"type":"radiogroup","name":"pg_q77","title":"Which technique reduces table size and improves cache locality for archived data?","choices":["Increase autovacuum scale factors","Partition by time and detach/attach older partitions; compress externally if needed","Drop all indexes","Disable WAL"],"correctAnswer":"Partition by time and detach/attach older partitions; compress externally if needed"},
  {"type":"radiogroup","name":"pg_q78","title":"What is a good process order to fix a slow report query?","choices":["Add indexes blindly -> celebrate","Measure -> inspect plan -> fix query/schema/index -> re-measure","Vacuum full -> reboot","Increase shared_buffers to 80% RAM"],"correctAnswer":"Measure -> inspect plan -> fix query/schema/index -> re-measure"},
  {"type":"radiogroup","name":"pg_q79","title":"When would you use HASH indexes?","choices":["For = comparisons on very large data always","Rarely; B-Tree usually better and HASH lacks some features (though improved)","For range queries","For ordering"],"correctAnswer":"Rarely; B-Tree usually better and HASH lacks some features (though improved)"},
  {"type":"radiogroup","name":"pg_q80","title":"Which set best summarizes a systematic Postgres performance review?","choices":["Increase all memory settings","Collect workload with pg_stat_statements; EXPLAIN ANALYZE top queries; validate stats; review schema/indexes; prune unused indexes; tune parameters with evidence","Rewrite to NoSQL","Disable autovacuum and vacuum manually"],"correctAnswer":"Collect workload with pg_stat_statements; EXPLAIN ANALYZE top queries; validate stats; review schema/indexes; prune unused indexes; tune parameters with evidence"}
]

